/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef STATE_MACHINE_H_
#define STATE_MACHINE_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the State_machine state machine.
*/
typedef struct State_machine State_machine;

/*!
* Forward declaration of the data structure for the State_machineIface interface scope.
*/
typedef struct State_machineIface State_machineIface;

#ifdef __cplusplus
}
#endif

#include "../simulator_api.h"
#include "../src/sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'state_machine'.
*/

#ifndef STATE_MACHINE_EVENTQUEUE_BUFFERSIZE
#define STATE_MACHINE_EVENTQUEUE_BUFFERSIZE 20
#endif
#ifndef STATE_MACHINE_IN_EVENTQUEUE_BUFFERSIZE
#define STATE_MACHINE_IN_EVENTQUEUE_BUFFERSIZE STATE_MACHINE_EVENTQUEUE_BUFFERSIZE
#endif
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */
#define STATE_MACHINE_STATE_COUNT 2

/*! Define dimension of the state configuration vector for orthogonal states. */
#define STATE_MACHINE_MAX_ORTHOGONAL_STATES 1

/*! Define indices of states in the StateConfVector */
#define SCVI_STATE_MACHINE_MAIN_REGION_STATEA 0
#define SCVI_STATE_MACHINE_MAIN_REGION_STATEB 0


/*
 * Enum of event names in the statechart.
 */
typedef enum  {
	State_machine_invalid_event = SC_INVALID_EVENT_VALUE,
	State_machine_myEvent
} State_machineEventID;

/*
 * Struct that represents a single event.
 */
typedef struct {
	State_machineEventID name;
} state_machine_event;

/*
 * Queue that holds the raised events.
 */
typedef struct state_machine_eventqueue_s {
	state_machine_event *events;
	sc_integer capacity;
	sc_integer pop_index;
	sc_integer push_index;
	sc_integer size;
} state_machine_eventqueue;

/*! Enumeration of all states */ 
typedef enum
{
	State_machine_last_state,
	State_machine_main_region_StateA,
	State_machine_main_region_StateB
} State_machineStates;




/*! Type declaration of the data structure for the State_machineIface interface scope. */
struct State_machineIface
{
	sc_boolean myEvent_raised;
	void* state;
};






/*! 
 * Type declaration of the data structure for the State_machine state machine.
 * This data structure has to be allocated by the client code. 
 */
struct State_machine
{
	State_machineStates stateConfVector[STATE_MACHINE_MAX_ORTHOGONAL_STATES];
	sc_ushort stateConfVectorPosition; 
	State_machineIface iface;
	sc_boolean isExecuting;
	state_machine_eventqueue in_event_queue;
	state_machine_event in_buffer[STATE_MACHINE_IN_EVENTQUEUE_BUFFERSIZE];
};



/*! Initializes the State_machine state machine data structures. Must be called before first usage.*/
extern void state_machine_init(State_machine* handle);


/*! Activates the state machine. */
extern void state_machine_enter(State_machine* handle);

/*! Deactivates the state machine. */
extern void state_machine_exit(State_machine* handle);




/*! Raises the in event 'myEvent' that is defined in the default interface scope. */ 
extern void state_machine_raise_myEvent(State_machine* handle);
/*! Gets the value of the variable 'state' that is defined in the default interface scope. */ 
extern void* state_machine_get_state(const State_machine* handle);
/*! Sets the value of the variable 'state' that is defined in the default interface scope. */ 
extern void state_machine_set_state(State_machine* handle, void* value);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean state_machine_is_active(const State_machine* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean state_machine_is_final(const State_machine* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean state_machine_is_state_active(const State_machine* handle, State_machineStates state);


#ifdef __cplusplus
}
#endif 

#endif /* STATE_MACHINE_H_ */
